<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns:xml="http://www.w3.org/XML/1998/namespace"
          xmlns:jcr="http://www.jcoderz.org/phoenix/report"
          elementFormDefault="unqualified"
          attributeFormDefault="unqualified"
          xmlns:jxb="http://java.sun.com/xml/ns/jaxb"
          xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
          jxb:extensionBindingPrefixes="xjc"
          jxb:version="1.0">
   <xsd:annotation>
      <xsd:appinfo>
         <jxb:globalBindings
            fixedAttributeAsConstantProperty="true"
            collectionType="java.util.ArrayList"
            typesafeEnumBase="xsd:NCName"
            choiceContentProperty="true"
            typesafeEnumMemberName="generateError"
            generateIsSetMethod="true"
            underscoreBinding="asCharInWord">
            <xjc:serializable uid="107"/>
         </jxb:globalBindings>
         <jxb:schemaBindings>
            <jxb:package name="org.jcoderz.phoenix.report.ftf.jaxb"/>
            <jxb:nameXmlTransform>
               <jxb:elementName suffix="Element"/>
            </jxb:nameXmlTransform>
         </jxb:schemaBindings>
      </xsd:appinfo>
   </xsd:annotation>

   <xsd:import namespace="http://www.jcoderz.org/phoenix/report"
               schemaLocation="../report-types.xsd" />

    <xsd:element name="findingTypeFormatDescription"
        type="findingTypeFormat"/>
        
        
    <xsd:complexType name="findingTypeFormat">
        <xsd:sequence>
            <xsd:element name="staticTypeInfo" type="typeInfo"/>
            <xsd:element name="rootType" type="findingDescription"/>
            <xsd:element name="findingType" type="findingDescription" 
                maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>


    <xsd:complexType name="typeInfo">
        <xsd:sequence>
            <xsd:element name="name" type="xsd:string"/>
            <xsd:element name="version" type="xsd:string"/>
            <xsd:element name="findingReportFilenamePattern" 
                type="xsd:string"/>
            <xsd:element name="logo" type="xsd:string"
                minOccurs="0"/>
            <!-- Add a base directory here? -->
        </xsd:sequence>
    </xsd:complexType>
            
    <xsd:complexType name="findingDescription">
        <xsd:sequence>
            <!-- Symbolic finding identifier -->
            <xsd:element name="symbol" type="xsd:string"/>
            <!-- Description is expected short line html
                 If omitted the symbol is used here. -->
            <xsd:element name="shortDescription" type="xsd:string"
                minOccurs="0"/>
            <!-- Description is expected to be several lines of html.
                 If omitted the shortDescription is used here. -->
            <xsd:element name="description" type="xsd:string" 
                minOccurs="0"/>
            <!-- If set, the finding is relevant independent if 
                 the source file was found in the input data. -->
            <xsd:element name="global" type="xsd:boolean" 
                minOccurs="0" default="false"/>
            <!--  Regular expression to match a item. (xpath?) -->
            <xsd:element name="pattern" type="xsd:string"/>
            <!--  Patterns are applied according to their priority -->
            <xsd:element name="priority" type="xsd:int" 
                minOccurs="0" default="0"/>

            <!--  Severity can be given static. -->
            <xsd:element name="severity" type="jcr:Severity"/>
            <!--  Severity as part of the pattern, write the number
                of the group to be used here. -->
            <xsd:element name="severityPos" type="xsd:string"
                minOccurs="0"/>
            <!--  Map text to a certain severity. -->
            <xsd:element name="severityMap" type="severityMap"
                minOccurs="0"/>
            <!--  The text is passed as input to the none root
                  finding descriptions -->
            <xsd:element name="textPos" type="xsd:string"
                minOccurs="0"/>
            
            <!--  Source file name as part of the pattern, write 
                the number of the group to be used here. -->
            <xsd:element name="filenamePos" type="xsd:string"
                minOccurs="0"/>
            <xsd:element name="lineStartPos" type="xsd:string"
                minOccurs="0"/>
            <!--  We support one special here 'caret' which means that
                  the source location can be determined by looking into the 
                  next 2 lines that look like this:
                  |import org.hibernate.engine.SessionImplementor;
                  |       ^
                  to determine the column of the code position. -->
            <xsd:element name="columnStartPos" type="xsd:string"
                minOccurs="0"/>
            <xsd:element name="lineEndPos" type="xsd:string"
                minOccurs="0"/>
            <xsd:element name="columnEndPos" type="xsd:string"
                minOccurs="0"/>
            <!-- This can be a text, that triggers the finding 
                (to be highlighted, in no exact src pos is available. -->
            <!-- TODO: We need some way to define a fuzzyness factor!  
                    Also it might be helpful to refer to the jedit
                    synax highlighter class (one for the actual 
                    token to be highlighted and one for surrounding
                    code, one for stop code.  -->
            <xsd:element name="sourceTextPos" type="xsd:string"
                minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="severityMap">
        <xsd:sequence>
            <xsd:element name="mapping" type="severityMapping" 
                maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="severityMapping">
        <xsd:sequence>
            <xsd:element name="text" type="xsd:string"/> 
            <xsd:element name="severity" type="jcr:Severity"/> 
        </xsd:sequence>
    </xsd:complexType>

</xsd:schema>